name: GIT CLI Collector
run-name: ${{ github.actor }} is Collecting ðŸš€
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  Date:
    runs-on: ubuntu-24.04
    outputs:
      Date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get current date
        id: DATE
        run: |
          echo "DATE=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
          echo -e "\n$GITHUB_OUTPUT\n"
          cat $GITHUB_OUTPUT

  Collect-RPMs:
    needs: [Date]
    runs-on: ubuntu-24.04
    strategy:
        max-parallel: 1
        matrix:
            os: [8, 9]
            repo: [endpoint]
    container:
      image: docker.io/redhat/ubi${{ matrix.os }}
      env:
        GH_TOKEN: ${{ github.token }}
      volumes:
        - /mnt:/mnt
      # credentials:
      #   username: ${{ secrets.REGISTRY_USER }}
      #   password: ${{ secrets.REGISTRY_TOKEN }}
      # ports:
      #   - 80

    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Show Files
        run: |
          chmod a+x reposync.sh 
          ls -Alht

      - name: List disks
        run: df -h /mnt

      - name: Register system and install packages
        run: |
          rm /etc/rhsm-host
          subscription-manager register --username '${{ secrets.REDHAT_USER }}' --password '${{ secrets.REDHAT_PASS }}'
          dnf install -y dnf-plugins-core yum-utils mkisofs isomd5sum tree procps-ng
          echo "Registering EndPoint Repo"
          dnf install https://packages.endpointdev.com/rhel/${{ matrix.os }}/main/x86_64/endpoint-repo.noarch.rpm
          dnf repolist

      - name: Sync Repo
        run: |
          reposync --download-metadata -m \
            --repo=endpoint-${{ matrix.os }} \
            -p /mnt/${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS

            - name: Directory Contents
            run: |
              echo -e "Directory Contents\n$(ls -lAhS *)"
              echo -e "\n\nDirectory Size\n$(du -hd1)"
    
          - name: TARchive Skopeo Output
            run: |
              tar -cv -Ipigz --remove-files \
                -f ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz \
                ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS \
              | tee ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz.txt
    
          - name: Generate Hash
            run: |
              sha256sum -b ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz  | tee \
                ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz.sha

          - name: List files 
            run: ls -Alh ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz*
    
          - name: Upload TARchive
            uses: actions/upload-artifact@v4
            with:
              name: ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz
              path: ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz
              if-no-files-found: error
    
          - name: Upload TARchive SHA
            uses: actions/upload-artifact@v4
            with:
              name: ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz.sha
              path: ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz.sha
              if-no-files-found: error
    
          - name: Upload TARchive ToC
            uses: actions/upload-artifact@v4
            with:
              name: ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz.txt
              path: ${{ vars.COLLECTOR }}-EndPoint-${{ matrix.os }}-RPMS-${{ needs.Date.outputs.Date }}.tgz.txt
              if-no-files-found: error

  Code:
    needs: [Date]
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"

      - name: Update Submodules if needed
        shell: bash
        run: git submodule update --init --recursive --remote

      - name: Bundle Repo1 code base for ${{ vars.COLLECTOR }}
        run: |
          git bundle create --progress ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.bundle --all
          ls -Alht *

      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.bundle
          path: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.bundle

  MakeISO:
    runs-on: ubuntu-24.04
    needs: [Date, Code, Collect-RPMs]
    permissions:
      contents: write
      pull-requests: read
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install mkisofs
        run: |
          sudo apt-get update -y
          sudo apt-get install -y mkisofs isomd5sum wget

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ISO

      - name: Download k9s CLI Binaries
        run: |
          export REPO="derailed/k9s"
          export DEST="ISO/binaries"
          echo -e "\nWorking with github repo $REPO"
          echo -e "Listing releases"
          gh release list -R $REPO
          echo -e "\nDownloading binaries"
          mkdir -p $DEST
          echo -e "\nDownloading Latest to $DEST"
          gh release download -p "*" -D $DEST -R $REPO
          echo -e "\nDownloaded to $DEST"
          ls -Alht $DEST

      - name: Copy Markdowns to ISO
        run: cp -v *.md ISO/

      - name: Show Artifacts
        run: ls -Alh ISO/*

      - name: Generate Artifact Hash File
        run: |
          cd ISO
          sha256sum -b ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}* | tee \
            ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.sha

      - name: Upload Artifact Hash File
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.sha
          path: ISO/${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.sha

      - name: Make ISO
        run: |
          mkisofs -J -R -v -T -l \
            -V '${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}' \
            -A '${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}' \
            -o ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso \
            ISO

      - name: Implant MD5 sum into iso
        run: implantisomd5 ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso

      - name: Generate ISO Hash
        run: |
          sha256sum -b ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso | tee \
            ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.sha

      - name: Show ISO & Hash
        run: ls -Alh *.iso*

      - name: Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso
          path: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso
          if-no-files-found: error

      - name: Upload ISO Hash
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.sha
          path: ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}.iso.sha

  Release:
    runs-on: ubuntu-24.04
    needs: [Date, MakeISO]
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Show Artifacts
        run: ls -Alh ${{ vars.COLLECTOR }}-*.*

      - name: Set up git
        run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        id: tag_create
        with:
          tag: ${{ needs.Date.outputs.Date }}
          github_token: ${{secrets.GITHUB_TOKEN}}
          tag_exists_error: false
          message: "Release for ${{ needs.Date.outputs.Date }} run"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ vars.COLLECTOR }} ${{ needs.Date.outputs.Date }}
          tag_name: ${{ needs.Date.outputs.Date }}
          make_latest: true
          files: |
            ${{ vars.COLLECTOR }}-${{ needs.Date.outputs.Date }}*.*

  Sharepoint:
    runs-on: ubuntu-24.04
    needs: [Date, MakeISO]
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Show Artifacts
        run: ls -Alh ${{ vars.COLLECTOR }}-*.*

      - name: Send Files to Sharepoint
        uses: amentumcms/sharepoint-file-upload-action@pappasjfed-patch-1
        with:
          file_path: "${{ vars.COLLECTOR }}-*.*"
          host_name: ${{ secrets.SHAREPOINT_HOST }}
          site_name: ${{ secrets.SHAREPOINT_SITE }}
          upload_path: '${{ secrets.SHAREPOINT_BASEPATH }}/${{ vars.COLLECTOR }}/${{ needs.Date.outputs.Date }}'
          tenant_id: ${{ secrets.SHAREPOINT_TENANT_ID }}
          client_id: ${{ secrets.SHAREPOINT_APP_ID }}
          client_secret: ${{ secrets.SHAREPOINT_APP_SECRET }}
          login_endpoint: 'login.microsoftonline.us'
          graph_endpoint: 'graph.microsoft.us'
